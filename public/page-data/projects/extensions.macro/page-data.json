{"componentChunkName":"component---src-templates-github-readme-page-js","path":"/projects/extensions.macro","result":{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"# extensions.macro 🌌\n\nExtension functions and parameters for JavaScript inspired by Kotlin's extensions\n\n## Installation\n\n```sh\nnpm i --save-dev extensions.macro\n```\n\nOr if using yarn:\n\n```sh\nyarn add --dev extensions.macro\n```\n\nThen just `import`:\n\n```js\nimport extension from 'extensions.macro'\n```\n\n> Note that you need to have _`babel`_ and _`babel-plugin-macros`_ installed\n\n## Motivation\n\nAs you might know - providing new properties to JavaScript built-in objects pollutes the global scope and is widely considered unsafe. This macro solves the problem allowing you to use dot notation to access external functions and properties 😋\n\n## Examples\n\n### Declaring extension\n\n```js\nimport extension from 'extensions.macro'\nextension.String.plus = string => plusString => `${string} ${plusString}`\n```\n\n> Note that it's initialized with function witch first argumument( _`string`_ ) provides an instance it's called on.\n\nThen you can use it like:\n\n```js\n'Hello'.plus('Extension!') //Outputs: Hello Extension!\n```\n\n### Another example:\n\n```js\nimport extension from 'extensions.macro'\n\nextension.any.log = obj => () => {\n  console.log(obj)\n  return obj\n}\n\n'The cosmos is yours 🌌'.log()\n//Logs: The cosmos is yours 🌌\n```\n\n## Usage\n\n### extension.<**_object constructor name_**>.<**_extension name_**> = <**_init_**>\n\n### Object constructor name\n\nIt's the result of calling `.constructor.name` on object the extension is dedicated for\n\n```js\n;(15).constructor.name //Outputs: Number\n```\n\n#### extension.any...\n\nYou can write `any` instead of constructor name to match any type of object\n\n### Extension name\n\nIt's the name of the extension you choose\n\n### Init\n\nIt's the function that takes an object and returns what should extension return\n\n## Rules\n\n- Declare extension in module scope\n- Extensions do not override object properties\n- Be aware of recursive extension\n\n### Declare extension in module scope\n\n```js\n//...\nimport curry from '@ramda/curry'\n\nextension.Function.curry = fun => curry(fun) //✔\n{\n  extension.Function.curry = fun => curry(fun) //❌Throws: Error\n}\n//...\n```\n\n### Extensions do not override object properties\n\n```js\nextension.any.reduce = obj => reducer => reducer(obj)\n\n'Who let the dogs out!?'.reduce(v => `${v} wow! wow! wow!`)\n//Outputs: Who let the dogs out!? wow! wow! wow!\n\n;[1, 2, 3].reduce((total, value) => total + value)\n//Outputs: 6\n```\n\n### Be aware of recursive called extension\n\nThough you can do it but it does not very performant and is considered to be blocked in future versions\n\n```js\nextension.Number.factorial = num => () => {\n  if (num === 1 || num === 0) return 1\n  return num * (num - 1).factorial()\n}\n//Works, but it's bad ❗\n```\n\nDo instead:\n\n```js\nconst factorial = num => {\n  if (num === 1 || num === 0) return 1\n  return num * factorial(num - 1)\n}\n\nextension.Number.factorial = num => () => factorial(num)\n//Right way ✅\n```\n\n## Other features\n\n### Extension overloading\n\nYou can overload `any` extension like so:\n\n```js\nextension.any.plus = obj => plusObj => obj + plusObj\nextension.String.plus = string => plusString => `${string} + ${plusString}`\n\n'👽'.plus('💩') //Outputs 👽 + 💩\n;(5).plus(2) ////Outputs 7\n```\n\n### Extension parameters\n\nYou might overlook that you needn't return function from extension\n\n```js\nextension.Array.last = arr => arr[arr.length - 1]\nconsole.log(['🥞', '💋'].last) //Logs: 💋\n```\n\n## To Do\n\n- Add `Import` and `Export` feature for extension\n- Add more reliable `Errors`\n\n## Proposals\n\n- Add extension setters?\n","repository":{"name":"extensions.macro","description":"Extension functions and parameters for JavaScript inspired by Kotlin's extensions","url":"https://github.com/fkrasnowski/extensions.macro"}}}}},"pageContext":{"name":"extensions.macro"}}}