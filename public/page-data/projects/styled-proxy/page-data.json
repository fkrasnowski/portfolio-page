{"componentChunkName":"component---src-templates-github-readme-page-js","path":"/projects/styled-proxy","result":{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"# styled-proxy\n\nAn exprimental css-in-js react library to style components using Proxy\n\n## Instalation\n\nThis is still just an experiment. To play with clone or download this repo and add files from src to your react projectâš›. You will also need to install `stylis`:\n\n`npm i stylis --save`\n\n## Example\n\nA basic example:\n\n```jsx\n/** @jsx jsx */\nimport { jsx, Styled } from '../src/main';\nimport React from 'react';\nconst styled = Styled();\n\nstyled.Card = ({ styles, color = 'pink', children }) => {\n  styles.default = {\n    backgroundColor: () => color,\n    height: '300px',\n    width: '250px',\n    color: 'black',\n    padding: '10px',\n    margin: '20px',\n  };\n  return <div sx={styles.default}>{children}</div>;\n};\n\nexport default function App() {\n  return (\n    <div>\n      <styled.Card color='green'>\n        <h2>Title</h2>\n        <p>Some text</p>\n      </styled.Card>\n    </div>\n  );\n}\n```\n\n## Usage\n\nFirst add custom `JSX pragma` anotation at the top of your file:\n\n```jsx\n/** @jsx jsx */\n```\n\nThen `import` `jsx` and `Styled` from `src/main.js` file of this repo:\n\n```jsx\n/** @jsx jsx */\nimport { jsx, Styled } from '../src/main';\nimport React from 'react';\n```\n\n> Note you have to import `React` for `JSX pragma` annotation to work\n\nInitialize `styled` and you're ready to go\n\n```jsx\nconst styled = Styled();\n```\n\n> The phrase `const styled = Styled();` creates an instance of styled. You can make many of them across the modules to keep your components isolated\n\n### Declare styled component\n\n```jsx\nstyled.BlueBox = ({ styles }) => {\n  styles.default = {\n    background: 'blue',\n    width: '4rem',\n    height: '4rem',\n  };\n  return <div sx={styles.default} />;\n};\n```\n\nAs it can be seen it looks pretty similar to standard react component. Styled components have `styles` prop that lets you define many styles for any component. You deliver style to an element by attaching it to `sx` prop\n\n### Add many styles\n\n```jsx\nstyled.RedOrBlueBox = ({ styles, variant }) => {\n  styles.default = {\n    background: 'red',\n    width: '4rem',\n    height: '4rem',\n  };\n  styles.blue = {\n    ...styles.default,\n    background: 'blue',\n  };\n  return <div sx={styles[variant]} />;\n};\n```\n\nThen...\n\n```jsx\nfunction App() {\n  return (\n    <div>\n      <styled.Box />\n      <styled.Box variant={'blue'} />\n    </div>\n  );\n}\n```\n\n> `styles.default` is applied if you don't provide any name\n\n### Dynamic styles\n\n```jsx\nstyled.ColorBox = ({ styles, bg = 'red' }) => {\n  styles.default = {\n    background: () => bg, //dynamicðŸ§¨\n    width: '4rem',\n    height: '4rem'\n  };\n  return <div sx={styles[]} />;\n};\n```\n\n> Dynamic properties of style are passed as functions\n\n```jsx\n<>\n  <styled.Box />\n  <styled.Box bg={'pink'} />\n</>\n```\n\n### Short styled\n\nIt's shorter way of defining styled component\n\n```jsx\nstyled.Box.div = ({bg}) => {\n    background: () => bg,\n    width: '4rem',\n    height: '4rem'\n  };\n```\n\nUse `as` prop to change the element type:\n\n```jsx\n<styled.Box bg={'pink'} as={'button'} />\n```\n\n### Global styles\n\nDeclare `styled.Global` to attach global styles\n\n```jsx\nconst Zilla = 'https://fonts.googleapis.com/css?family=Zilla+Slab&display=swap';\n\nstyled.Global = {\n  link: [Zilla],\n  body: {\n    margin: 0,\n    fontFamily: `\n        'Zilla Slab',\n        'Helvetica Neue',\n        'Helvetica',\n        'Arial',\n        sans-serif\n      `,\n    backgroundColor: 'rgb(34, 34, 34)',\n    color: 'aliceblue',\n  },\n\n  h1: {\n    h2: { fontSize: '5vh' },\n    h3: { fontSize: '3vh' },\n    fontSize: '8vh',\n  },\n};\n```\n\n> Adding url to `link` property works as `<link>` tag\n\n### Getting `css` class name\n\nSometimes you might need to get the real name of `css` class in document. It's simple as calling `.getClass()`:\n\n```jsx\nstyled.Card = ({ styles }) => {\n  styles.default = {\n    backgroundColor: () => color,\n    height: '300px',\n    width: '250px',\n    color: 'black',\n  };\n\n  const className = styles.default.getClass(); // Outputs name of css class in the document ðŸ’«\n  return (\n    <div sx={styles.default}>\n      <h2>Title</h2>\n      <p>Some text</p>\n    </div>\n  );\n};\n```\n\n### `Import` and `export` styled components\n\n#### `Export`\n\nJust export styled instance:\n\n```jsx\n//module-one.js\n\n/** @jsx jsx */\nimport { jsx, Styled } from 'styled-proxy';\nimport React from 'react';\nconst styled = Styled();\n\nstyled.Title.h1 = () => ({\n  fontSize: '10rem',\n  fontWeight: 'bolder',\n});\n\nexport default styled;\n```\n\n#### `Import`\n\nAnd `import` it:\n\n```jsx\n//module-two.js\n\nimport { jsx } from 'styled-proxy';\nimport React from 'react';\nimport imported from './module-one';\n\nexport default () => (\n  <div>\n    <imported.Title>Lick meðŸ‘…</imported.Title>\n  </div>\n);\n```\n","repository":{"name":"styled-proxy","description":"An exprimental css-in-js react library to style components using Proxy","url":"https://github.com/fkrasnowski/styled-proxy"}}}}},"pageContext":{"name":"styled-proxy"}}}