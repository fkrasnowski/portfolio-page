{"componentChunkName":"component---src-templates-github-readme-page-js","path":"/projects/anyall.macro","result":{"data":{"github":{"repository":{"object":{"__typename":"GitHub_Blob","text":"# anyall.macro\n\nA Babel macro making multiple value comparison easy\n\n## Instalation\n\n```sh\nnpm i --save-dev anyall.macro\n```\n\nOr if using yarn:\n\n```sh\nyarn add --dev anyall.macro\n```\n\nThen just `import`:\n\n```js\nimport { any, all } from 'anyall.macro';\n```\n\n> Note that you need to have _`babel`_ and _`babel-plugin-macros`_ installed\n\n## Examples\n\n### Self explanatory example\n\n```js\nimport { any, all } from 'anyall.macro';\nall(1, 2, 3) === any(3, 1, 2); //Outputs: true;\n```\n\nYeah, it does what it says. It means all arguments from first function equals any of arguments in second one\n\n### Another example:\n\n```js\nimport { any, all } from 'anyall.macro';\n\nall(10, 11, 12) > all(5, 5, 10); //Outputs: false\n\nall(5, 5, 5) === 5; //Outputs: true\n\n3 <= all(3, 2); //Outputs: false\n\nany(2, 1) > any(10, 1); //Outputs: true\n\n3 <= any(1, 3); ////Outputs: true\n```\n\n## The Why?\n\nI often catch myself doing someting like this in order to compare some values:\n\n```js\nif(['start', 'run', 'go', 'execute'].includes(x)) {...}\n```\n\nIt's less boilerplate and also some way less readable than:\n\n```js\nif(x === 'start' || x ==='run' || x === 'go' || x === 'execute') {...}\n```\n\nIn comparison to above examples using `anyall.macro` you can do:\n\n```js\nif(x === any('start', 'run', 'go', 'execute')) {...}\n```\n\nIt's cleaner and less boilerplate!\nAllows you to write comparison without repetitive tasks like writing `||` and `&&` muliple times, or what's even worst writing overhelming functions by using nested `Array.proptotype.find` and `Array.proptotype.every`\n","repository":{"name":"anyall.macro","description":" A Babel macro making multiple value comparison easy","url":"https://github.com/fkrasnowski/anyall.macro"}}}}},"pageContext":{"name":"anyall.macro"}}}